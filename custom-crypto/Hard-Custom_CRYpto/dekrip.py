from Crypto.Util.number import inverse, long_to_bytes

# Known values
# p = 9255148449636418216385264245495380482495319132180584397583467416355769839562706084794458545102351040157147419871853545909043164883810472180514610420641921
# q = 6931631282889972183327683199072306716240322338997374907010572707887059508933369990642023077374138000177093679758882336300263254384172980207042097698432353
# e = 65537

# Ciphertext
ct_hex = "542ab37323abff2b115ea77c9e2307f21317610b06e666f3d465b02fc1c496dcf1045da29d8cc8eb3c848339178a6a8781d9dc9f67bc07bd28f25d0bc10a073cffc14a13201375e965e246c074753bae2ced8e0ff4c1c5addc050f4b861e055f0e20a2b72eee48958113beac53d6f09805b99c4009c65bde71ba7bee5511c996"
ciphertext = int(ct_hex, 16)

def decrypt_rsa():
    p = 9255148449636418216385264245495380482495319132180584397583467416355769839562706084794458545102351040157147419871853545909043164883810472180514610420641921
    q = 6931631282889972183327683199072306716240322338997374907010572707887059508933369990642023077374138000177093679758882336300263254384172980207042097698432353
    e = 65537
    # Calculate n (modulus)
    n = p * q
    
    # Calculate Ï†(n)
    phi = (p - 1) * (q - 1)
    
    # Calculate private exponent d
    d = inverse(e, phi)
    
    # Decrypt
    plaintext = pow(ciphertext, d, n)
    
    # Convert to bytes and decode
    try:
        message = long_to_bytes(plaintext)
        return message
    except Exception as e:
        return f"Decryption failed: {e}"

if __name__ == "__main__":
    decrypted = decrypt_rsa()
    print("\nDecrypted message:", decrypted)